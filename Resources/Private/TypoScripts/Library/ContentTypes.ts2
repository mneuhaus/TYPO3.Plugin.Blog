#
# Make sure that if the section of a page needs to be rendered which in fact is
# a Post node, use the RobertLemke.Plugin.Blog:Post TypoScript object to render
# that part instead of the default content collection rendering
#

prototype(TYPO3.Neos.ContentTypes:Section).blogPost {
	condition = ${q(node).is('[instanceof RobertLemke.Plugin.Blog:Post]')}
	type = 'RobertLemke.Plugin.Blog:Post'
}

#
# TYPO3.Neos.ContentTypes:Section is copied to TYPO3.Neos:Section by Neos in order
# to access it through the default namespace by simply referring to "Section". If
# the full name TYPO3.Neos.ContentTypes:Section is used, the above case will be
# active. If the short name "Section" from "TYPO3.Neos" is used, we provide a copy

prototype(TYPO3.Neos:Section).blogPost < prototype(TYPO3.Neos.ContentTypes:Section).blogPost

#
# Blog Post is rendered by a Template-based TypoScript object which contains some
# properties on its own (title, ...) and renders sub nodes contained in two
# separate sections, namely "main" for the actual post content and "comments" for
# the comment nodes.
#
# The blog post content is made of several content elements which are rendered
# as a collection just like a page would render its content elements. Hence the
# usage of Section.Default.
#
# The blog post comments are just several Text nodes which are as well rendered
# through the TypoScript collection feature.
#

prototype(RobertLemke.Plugin.Blog:Post) < prototype(TYPO3.TypoScript:Template)
prototype(RobertLemke.Plugin.Blog:Post) {
	templatePath = 'resource://RobertLemke.Plugin.Blog/Private/Templates/TypoScript/Post.html'
	title = ${q(node).property('title')}
	author = ${q(node).property('author')}
	datePublished = ${q(node).property('datePublished')}

		# Create a new Section TypoScript object which inherits the behavior of the
		# default section (which renders a collection of content elements).
	main = TYPO3.Neos.ContentTypes:Section.Default

		# The name of the section node to be rendered is also "main"
	main.nodePath = 'main'

		# Create a similar Section TypoScript object for comments, but set the
		# node path leading to the section to "comments" because it is a sub node
		# of the current node (which is a Post node)
	comments = TYPO3.Neos.ContentTypes:Section.Default
	comments.nodePath = 'comments'

		# Override the collection query for comments in order to filter out any
		# entries flagged as spam
	comments.collection = ${q(node).is('[instanceof TYPO3.Neos.ContentTypes:Section]') ? q(node).children("[spam = false]") : q(node).children(this.getNodePath()).children("[spam = false]")}

	numberOfComments = ${q(node).children('comments').children("[spam = false]").count()}
}

#
# Blog Comment is rendered by a vanilla Template-based TypoScript object
#

prototype(RobertLemke.Plugin.Blog:Comment) < prototype(TYPO3.TypoScript:Template)
prototype(RobertLemke.Plugin.Blog:Comment) {
	templatePath = 'resource://RobertLemke.Plugin.Blog/Private/Templates/TypoScript/Comment.html'
	text = ${q(node).property('text')}
}

#
# The PostPlugin provides a few methods to display lists of blog posts. Its
# TypoScript object is a regular Plugin content type.
#

prototype(RobertLemke.Plugin.Blog:PostPlugin) < prototype(TYPO3.Neos.ContentTypes:Plugin)
prototype(RobertLemke.Plugin.Blog:PostPlugin) {
	package = 'RobertLemke.Plugin.Blog'
	controller = 'Post'
	action = 'index'
}
